import streamlit as st
import tensorflow as tf
import numpy as np
import pickle
import os
from tensorflow.keras.preprocessing.sequence import pad_sequences

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CLASS_NAMES = ['World', 'Sports', 'Business', 'Sci/Tech']
MODEL_PATH = 'model_glove_lstm.h5'  # –§–∞–π–ª –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ H5
TOKENIZER_PATH = 'tokenizer.pkl'    # –§–∞–π–ª —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    try:
        return tf.keras.models.load_model(MODEL_PATH)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
@st.cache_resource
def load_tokenizer():
    try:
        with open(TOKENIZER_PATH, 'rb') as f:
            return pickle.load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return None

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.title("üì∞ News Classifier (GloVe+LSTM)")
    st.write("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ 4 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: World, Sports, Business, Sci/Tech")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    model = load_model()
    tokenizer = load_tokenizer()
    
    if model is None or tokenizer is None:
        st.stop()
    
    # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ):", height=150,
                       placeholder="Example: Tesla announced new battery technology...")
    
    if st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
        if not text.strip():
            st.warning("Please enter some text")
        else:
            with st.spinner("Analyzing..."):
                try:
                    # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    seq = tokenizer.texts_to_sequences([text])
                    padded = pad_sequences(seq, maxlen=100)
                    pred = model.predict(padded, verbose=0)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    category = CLASS_NAMES[np.argmax(pred)]
                    confidence = np.max(pred)
                    
                    st.success(f"Category: {category}")
                    st.metric("Confidence", f"{confidence:.1%}")
                    
                    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
                    with st.expander("Details"):
                        for name, prob in zip(CLASS_NAMES, pred[0]):
                            st.write(f"{name}: {prob:.4f}")
                            
                except Exception as e:
                    st.error(f"Classification error: {e}")

if __name__ == "__main__":
    main()